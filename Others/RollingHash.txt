struct RollingHash {
    using ull = unsigned long long;
    const ull base = 10007;
    const ull R_MOD = (1UL << 61) - 1;
    const ull MASK30 = (1UL << 30) - 1;
    const ull MASK31 = (1UL << 31) - 1;
    const ull MASK61 = R_MOD;
    const ull POSITIVIZER = R_MOD * 4;
    string s;
    vector<ull> hash, power;
    ull modMul(ull a, ull b) {
        ull au = a >> 31;
        ull ad = a & MASK31;
        ull bu = b >> 31;
        ull bd = b & MASK31;
        ull mid = ad * bu + au * bd;
        ull midu = mid >> 30;
        ull midd = mid & MASK30;
        return CalcMod(au * bu * 2 + midu + (midd << 31) + ad * bd);
    }
    ull CalcMod(ull x) {
        ull xu = x >> 61;
        ull xd = x & MASK61;
        ull res = xu + xd;
        if (res >= R_MOD) res -= R_MOD;
        return res;
    }
    RollingHash(string s_ = "") : s(s_) {
        [&]() -> void {
            hash.resize(s.size());
            for(int i = 0; i < s.size(); i++) {
                ull pre = (i == 0 ? 0 : hash[i - 1]);
                hash[i] = CalcMod(modMul(pre,  base) + ull(s[i]));
            }
            return;
        }();
        [&]() -> void {
            power.resize(s.size() + 1);
            power[0] = 1;
            for(int i = 0; i < s.size(); i++) {
                power[i + 1] = modMul(power[i], base);
            }
            return;
        }();
    }
    // [l, r]
    ull get(int l, int r) {
        return CalcMod(hash[r] + POSITIVIZER - (l > 0 ? modMul(hash[l - 1], power[r - l + 1]) : 0));
    }
    ull connect(ull s1, ull s2, ull s2_len) {
        return CalcMod(modMul(hash[s1], power[s2_len]) + hash[s2]);
    }
};
/*
  char_size=文字の種類
  base=文字の0番目 ex.) 'a'
  T=文字列の型             
*/
template<int char_size,int base,class T>
struct Trie{
    struct Node{
        vector<int> nex;
        vector<int> accept;
        int c;
        int common;
        Node(int _c):c(_c),common(0){
            nex.assign(char_size,-1);
        }
    };
    vector<Node> nodes;
    int root;
    Trie():root(0){
        nodes.push_back(Node(root));
    }
    
    //挿入
    void insert(const T word,int word_index){
        int node_index=0;
        for(int i=0;i<(int)word.size();i++){
            int c=(int)(word[i]-base);
            int &nex_index=nodes[node_index].nex[c];
            if(nex_index==-1){
                nex_index=(int)nodes.size();
                nodes.push_back(Node(c));
            }
            nodes[node_index].common++;
            node_index=nex_index;
        }
        nodes[node_index].common++;
        nodes[node_index].accept.push_back(word_index);
    }
    void insert(const T& word){
        insert(word,nodes[0].common);
    }

    //検索
    bool serch(const T &word,bool prefix=false){
        int node_index=0;
        for(int i=0;i<(int)word.size();i++){
            int c=(int)(word[i]-base);
            int &nex_index=nodes[node_index].nex[c];
            if(nex_index==-1){
                return false;
            }
            node_index=nex_index;
        }
        return nodes[node_index].accept.size()>0;
    }
    bool serch_with(const T &prefix){
        return serch(prefix,true);
    }
};